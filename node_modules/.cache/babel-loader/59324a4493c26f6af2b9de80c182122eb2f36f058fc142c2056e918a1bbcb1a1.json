{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\InterviewCoachWeb\\\\src\\\\components\\\\RecButton\\\\RecButton.js\";\nimport React from \"react\";\nimport './RecButton.css';\nimport TranscribedTemplate from \"../../views/globals\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst axios = require(\"axios\");\nconst backend_path = \"http://127.0.0.1:5000/transcribe\";\nexport var Transcribed = new TranscribedTemplate(undefined, undefined, undefined);\nclass RecButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.audioChunks = [];\n    this.state = {\n      status: \"not started\",\n      button_name: \"Record\"\n    };\n    this.audioChunks = [];\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      this.handlerFunction(stream);\n    });\n    this.assembly = axios.create({\n      baseURL: \"https://api.assemblyai.com/v2\",\n      headers: {\n        authorization: \"9a5a49872617470188698664380c2cce\",\n        \"content-type\": \"application/json\"\n        //\"transfer-encoding\": \"chunked\",\n      }\n    });\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handlerFunction(stream) {\n    this.rec = new MediaRecorder(stream, {\n      type: 'video/webm'\n    });\n    this.rec.ondataavailable = e => {\n      this.audioChunks.push(e.data);\n      if (this.rec.state === \"inactive\") {\n        let blob = new Blob(this.audioChunks, {\n          type: this.rec.mimeType\n        });\n        let myUrl = URL.createObjectURL(blob);\n        //let blob = new File(tmp,\"C:\\\\Users\\\\ghoey\\\\test_audio.mp3\", {type:'audio/mpeg-3'});\n        // console.log(blob)\n        this.sendData(blob);\n      }\n    };\n\n    /*\r\n    this.rec.onstop = function(e) {\r\n        console.log(\"data available after MediaRecorder.stop() called.\");\r\n    \r\n        //var audio = document.createElement('audio');\r\n        //audio.controls = true;\r\n       \r\n        console.log(\"recorder stopped\");\r\n      }\r\n      */\n  }\n  sendData(blob) {\n    /*\r\n    console.log(blob)\r\n    var reader = new FileReader();\r\n    reader.readAsArrayBuffer(blob);\r\n    reader.onloadend = (event) => {\r\n    // The contents of the BLOB are in reader.result:\r\n        console.log(reader.result);\r\n        axios({\r\n            method: 'POST',\r\n            url: backend_path,\r\n            data: {\r\n              audio: reader.result\r\n            }, \r\n            headers: {\r\n                \"content-type\": \"application/json\"\r\n            }\r\n          }).then((response) => {\r\n            console.log(response);\r\n          })\r\n    }\r\n    */\n\n    var reader = new FileReader();\n    reader.readAsArrayBuffer(blob);\n    reader.onloadend = event => {\n      var data = reader.result;\n      var url_p = this.assembly.post(\"/upload\", data).then(res => {\n        return res.data['upload_url'];\n      });\n      //.catch((err) => console.error(err));\n\n      var pending_response = url_p.then(url => {\n        return this.assembly.post(\"/transcript\", {\n          audio_url: url,\n          disfluencies: true\n        }).then(res => {\n          return res.data;\n        });\n        //.catch((err) => console.error(err));\n      }).then(async pending_response => {\n        var id = pending_response.id;\n        var flag = true;\n        while (flag) {\n          var status = this.assembly.get(`/transcript/${id}`).then(res => res.data);\n          //.catch((err) => console.error(err))\n          const status_resp = await status;\n          //  console.log(status_resp)\n          flag = status_resp.status !== \"completed\";\n          if (status_resp.status === \"error\") {\n            break;\n          }\n        }\n        var transcript_p = this.assembly.get(`/transcript/${id}`).then(res => res.data);\n        // .catch((err) => console.error(err))\n        const transcript = await transcript_p;\n        //console.log(\"New transcript::\\n\", transcript.text)\n        // Transcribed = transcript\n        Transcribed.text = transcript.text;\n        Transcribed.words = transcript.words;\n        Transcribed.duration = transcript.audio_duration;\n        this.audioChunks = [];\n        this.setState({\n          button_name: \"Done\"\n        });\n      });\n    };\n  }\n  handleClick() {\n    if (this.state.status === \"not started\") {\n      this.setState({\n        status: \"recording\",\n        button_name: \"Stop\"\n      });\n      this.rec.start();\n    } else if (this.state.status === \"recording\") {\n      this.setState({\n        status: \"not started\",\n        button_name: \"Wait\"\n      });\n      this.rec.stop();\n    } else if (this.state.status === \"done\") {\n      this.setState({\n        status: \"not started\"\n      });\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rec-button\",\n      onClick: this.handleClick,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", this.state.button_name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default RecButton;\n// export  {Transcribed};","map":{"version":3,"names":["React","TranscribedTemplate","jsxDEV","_jsxDEV","axios","require","backend_path","Transcribed","undefined","RecButton","Component","constructor","props","audioChunks","state","status","button_name","navigator","mediaDevices","getUserMedia","audio","then","stream","handlerFunction","assembly","create","baseURL","headers","authorization","handleClick","bind","rec","MediaRecorder","type","ondataavailable","e","push","data","blob","Blob","mimeType","myUrl","URL","createObjectURL","sendData","reader","FileReader","readAsArrayBuffer","onloadend","event","result","url_p","post","res","pending_response","url","audio_url","disfluencies","id","flag","get","status_resp","transcript_p","transcript","text","words","duration","audio_duration","setState","start","stop","render","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/projects/InterviewCoachWeb/src/components/RecButton/RecButton.js"],"sourcesContent":["import React from \"react\";\r\nimport './RecButton.css';\r\nimport TranscribedTemplate from \"../../views/globals\";\r\nconst axios = require(\"axios\"); \r\n\r\nconst backend_path = \"http://127.0.0.1:5000/transcribe\"\r\n\r\nexport var Transcribed = new TranscribedTemplate(undefined, undefined, undefined); \r\n\r\nclass RecButton extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {status: \"not started\", button_name: \"Record\"};\r\n        \r\n        this.audioChunks = []     \r\n\r\n        navigator.mediaDevices.getUserMedia({audio:true})\r\n        .then(stream => {this.handlerFunction(stream)})\r\n\r\n        \r\n        this.assembly = axios.create({\r\n        baseURL: \"https://api.assemblyai.com/v2\",\r\n        headers: {\r\n            authorization: \"9a5a49872617470188698664380c2cce\",\r\n            \"content-type\": \"application/json\",\r\n            //\"transfer-encoding\": \"chunked\",\r\n        },\r\n        });\r\n        \r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n    audioChunks = []\r\n\r\n    \r\n    \r\n\r\n    handlerFunction(stream) {\r\n        this.rec = new MediaRecorder(stream, {type: 'video/webm'});\r\n        this.rec.ondataavailable = e => {\r\n            \r\n            this.audioChunks.push(e.data)\r\n            if (this.rec.state === \"inactive\"){\r\n                let blob = new Blob(this.audioChunks, {type:this.rec.mimeType});\r\n                let myUrl = URL.createObjectURL(blob)\r\n                //let blob = new File(tmp,\"C:\\\\Users\\\\ghoey\\\\test_audio.mp3\", {type:'audio/mpeg-3'});\r\n                // console.log(blob)\r\n                this.sendData(blob)\r\n            }\r\n        }\r\n\r\n        \r\n        /*\r\n        this.rec.onstop = function(e) {\r\n            console.log(\"data available after MediaRecorder.stop() called.\");\r\n        \r\n            //var audio = document.createElement('audio');\r\n            //audio.controls = true;\r\n           \r\n            console.log(\"recorder stopped\");\r\n          }\r\n          */\r\n    }\r\n\r\n\r\n    sendData(blob) {\r\n       \r\n        /*\r\n        console.log(blob)\r\n        var reader = new FileReader();\r\n        reader.readAsArrayBuffer(blob);\r\n        reader.onloadend = (event) => {\r\n        // The contents of the BLOB are in reader.result:\r\n            console.log(reader.result);\r\n            axios({\r\n                method: 'POST',\r\n                url: backend_path,\r\n                data: {\r\n                  audio: reader.result\r\n                }, \r\n                headers: {\r\n                    \"content-type\": \"application/json\"\r\n                }\r\n              }).then((response) => {\r\n                console.log(response);\r\n              })\r\n        }\r\n        */\r\n\r\n        var reader = new FileReader();\r\n        reader.readAsArrayBuffer(blob);\r\n        reader.onloadend = (event) => { \r\n           \r\n            var data = reader.result\r\n\r\n          \r\n            var url_p = this.assembly\r\n                .post(\"/upload\", data)\r\n                .then((res) => { \r\n\r\n                    return res.data['upload_url']\r\n\r\n            })\r\n                //.catch((err) => console.error(err));\r\n        \r\n            var pending_response = url_p.then(url => {\r\n                return this.assembly\r\n                .post(\"/transcript\", {\r\n                    audio_url: url,\r\n                    disfluencies: true\r\n                })\r\n                .then((res) => { \r\n\r\n                    return res.data})\r\n                //.catch((err) => console.error(err));\r\n        \r\n            }).then(async (pending_response) => {\r\n                var id = pending_response.id\r\n                var flag = true\r\n                while (flag){\r\n                    var status = this.assembly\r\n                    .get(`/transcript/${id}`)\r\n                    .then((res) => res.data)\r\n                    //.catch((err) => console.error(err))\r\n                    const status_resp = await status\r\n                  //  console.log(status_resp)\r\n                    flag = status_resp.status !== \"completed\"\r\n\r\n                   if (status_resp.status === \"error\") {\r\n                       break;\r\n                   }\r\n                } \r\n                var transcript_p = this.assembly\r\n                    .get(`/transcript/${id}`)\r\n                    .then((res) => res.data)\r\n                   // .catch((err) => console.error(err))\r\n                const transcript = await transcript_p\r\n                //console.log(\"New transcript::\\n\", transcript.text)\r\n               // Transcribed = transcript\r\n                Transcribed.text = transcript.text;\r\n                Transcribed.words = transcript.words;\r\n                Transcribed.duration = transcript.audio_duration;\r\n                this.audioChunks = []\r\n                this.setState({\r\n                    button_name: \"Done\",\r\n                  });\r\n\r\n                      \r\n            });\r\n        }\r\n       \r\n        \r\n    }\r\n\r\n    handleClick() {\r\n        if (this.state.status === \"not started\") {\r\n            this.setState({\r\n                status: \"recording\", button_name: \"Stop\"\r\n              });\r\n            \r\n            this.rec.start()\r\n \r\n        \r\n        } else if (this.state.status === \"recording\") {\r\n            \r\n            this.setState({\r\n                status: \"not started\", button_name: \"Wait\"\r\n            });\r\n            this.rec.stop()\r\n           \r\n            \r\n        } else if (this.state.status === \"done\") {\r\n            this.setState({\r\n                status: \"not started\",\r\n              });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n\r\n            <div className={\"rec-button\"} onClick={this.handleClick}>\r\n            <div> {this.state.button_name} </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default RecButton;\r\n// export  {Transcribed};"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,iBAAiB;AACxB,OAAOC,mBAAmB,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACtD,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAE9B,MAAMC,YAAY,GAAG,kCAAkC;AAEvD,OAAO,IAAIC,WAAW,GAAG,IAAIN,mBAAmB,CAACO,SAAS,EAAEA,SAAS,EAAEA,SAAS,CAAC;AAEjF,MAAMC,SAAS,SAAST,KAAK,CAACU,SAAS,CAAC;EACpCC,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IAAC,KAoBjBC,WAAW,GAAG,EAAE;IAnBZ,IAAI,CAACC,KAAK,GAAG;MAACC,MAAM,EAAE,aAAa;MAAEC,WAAW,EAAE;IAAQ,CAAC;IAE3D,IAAI,CAACH,WAAW,GAAG,EAAE;IAErBI,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MAACC,KAAK,EAAC;IAAI,CAAC,CAAC,CAChDC,IAAI,CAACC,MAAM,IAAI;MAAC,IAAI,CAACC,eAAe,CAACD,MAAM,CAAC;IAAA,CAAC,CAAC;IAG/C,IAAI,CAACE,QAAQ,GAAGpB,KAAK,CAACqB,MAAM,CAAC;MAC7BC,OAAO,EAAE,+BAA+B;MACxCC,OAAO,EAAE;QACLC,aAAa,EAAE,kCAAkC;QACjD,cAAc,EAAE;QAChB;MACJ;IACA,CAAC,CAAC;IAEF,IAAI,CAACC,WAAW,GAAG,IAAI,CAACA,WAAW,CAACC,IAAI,CAAC,IAAI,CAAC;EAClD;EAMAP,eAAeA,CAACD,MAAM,EAAE;IACpB,IAAI,CAACS,GAAG,GAAG,IAAIC,aAAa,CAACV,MAAM,EAAE;MAACW,IAAI,EAAE;IAAY,CAAC,CAAC;IAC1D,IAAI,CAACF,GAAG,CAACG,eAAe,GAAGC,CAAC,IAAI;MAE5B,IAAI,CAACtB,WAAW,CAACuB,IAAI,CAACD,CAAC,CAACE,IAAI,CAAC;MAC7B,IAAI,IAAI,CAACN,GAAG,CAACjB,KAAK,KAAK,UAAU,EAAC;QAC9B,IAAIwB,IAAI,GAAG,IAAIC,IAAI,CAAC,IAAI,CAAC1B,WAAW,EAAE;UAACoB,IAAI,EAAC,IAAI,CAACF,GAAG,CAACS;QAAQ,CAAC,CAAC;QAC/D,IAAIC,KAAK,GAAGC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;QACrC;QACA;QACA,IAAI,CAACM,QAAQ,CAACN,IAAI,CAAC;MACvB;IACJ,CAAC;;IAGD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EAGAM,QAAQA,CAACN,IAAI,EAAE;IAEX;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEQ,IAAIO,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC7BD,MAAM,CAACE,iBAAiB,CAACT,IAAI,CAAC;IAC9BO,MAAM,CAACG,SAAS,GAAIC,KAAK,IAAK;MAE1B,IAAIZ,IAAI,GAAGQ,MAAM,CAACK,MAAM;MAGxB,IAAIC,KAAK,GAAG,IAAI,CAAC3B,QAAQ,CACpB4B,IAAI,CAAC,SAAS,EAAEf,IAAI,CAAC,CACrBhB,IAAI,CAAEgC,GAAG,IAAK;QAEX,OAAOA,GAAG,CAAChB,IAAI,CAAC,YAAY,CAAC;MAErC,CAAC,CAAC;MACE;;MAEJ,IAAIiB,gBAAgB,GAAGH,KAAK,CAAC9B,IAAI,CAACkC,GAAG,IAAI;QACrC,OAAO,IAAI,CAAC/B,QAAQ,CACnB4B,IAAI,CAAC,aAAa,EAAE;UACjBI,SAAS,EAAED,GAAG;UACdE,YAAY,EAAE;QAClB,CAAC,CAAC,CACDpC,IAAI,CAAEgC,GAAG,IAAK;UAEX,OAAOA,GAAG,CAAChB,IAAI;QAAA,CAAC,CAAC;QACrB;MAEJ,CAAC,CAAC,CAAChB,IAAI,CAAC,MAAOiC,gBAAgB,IAAK;QAChC,IAAII,EAAE,GAAGJ,gBAAgB,CAACI,EAAE;QAC5B,IAAIC,IAAI,GAAG,IAAI;QACf,OAAOA,IAAI,EAAC;UACR,IAAI5C,MAAM,GAAG,IAAI,CAACS,QAAQ,CACzBoC,GAAG,CAAE,eAAcF,EAAG,EAAC,CAAC,CACxBrC,IAAI,CAAEgC,GAAG,IAAKA,GAAG,CAAChB,IAAI,CAAC;UACxB;UACA,MAAMwB,WAAW,GAAG,MAAM9C,MAAM;UAClC;UACE4C,IAAI,GAAGE,WAAW,CAAC9C,MAAM,KAAK,WAAW;UAE1C,IAAI8C,WAAW,CAAC9C,MAAM,KAAK,OAAO,EAAE;YAChC;UACJ;QACH;QACA,IAAI+C,YAAY,GAAG,IAAI,CAACtC,QAAQ,CAC3BoC,GAAG,CAAE,eAAcF,EAAG,EAAC,CAAC,CACxBrC,IAAI,CAAEgC,GAAG,IAAKA,GAAG,CAAChB,IAAI,CAAC;QACzB;QACH,MAAM0B,UAAU,GAAG,MAAMD,YAAY;QACrC;QACD;QACCvD,WAAW,CAACyD,IAAI,GAAGD,UAAU,CAACC,IAAI;QAClCzD,WAAW,CAAC0D,KAAK,GAAGF,UAAU,CAACE,KAAK;QACpC1D,WAAW,CAAC2D,QAAQ,GAAGH,UAAU,CAACI,cAAc;QAChD,IAAI,CAACtD,WAAW,GAAG,EAAE;QACrB,IAAI,CAACuD,QAAQ,CAAC;UACVpD,WAAW,EAAE;QACf,CAAC,CAAC;MAGR,CAAC,CAAC;IACN,CAAC;EAGL;EAEAa,WAAWA,CAAA,EAAG;IACV,IAAI,IAAI,CAACf,KAAK,CAACC,MAAM,KAAK,aAAa,EAAE;MACrC,IAAI,CAACqD,QAAQ,CAAC;QACVrD,MAAM,EAAE,WAAW;QAAEC,WAAW,EAAE;MACpC,CAAC,CAAC;MAEJ,IAAI,CAACe,GAAG,CAACsC,KAAK,CAAC,CAAC;IAGpB,CAAC,MAAM,IAAI,IAAI,CAACvD,KAAK,CAACC,MAAM,KAAK,WAAW,EAAE;MAE1C,IAAI,CAACqD,QAAQ,CAAC;QACVrD,MAAM,EAAE,aAAa;QAAEC,WAAW,EAAE;MACxC,CAAC,CAAC;MACF,IAAI,CAACe,GAAG,CAACuC,IAAI,CAAC,CAAC;IAGnB,CAAC,MAAM,IAAI,IAAI,CAACxD,KAAK,CAACC,MAAM,KAAK,MAAM,EAAE;MACrC,IAAI,CAACqD,QAAQ,CAAC;QACVrD,MAAM,EAAE;MACV,CAAC,CAAC;IACR;EACJ;EAEAwD,MAAMA,CAAA,EAAG;IAEL,oBAEIpE,OAAA;MAAKqE,SAAS,EAAE,YAAa;MAACC,OAAO,EAAE,IAAI,CAAC5C,WAAY;MAAA6C,QAAA,eACxDvE,OAAA;QAAAuE,QAAA,GAAK,GAAC,EAAC,IAAI,CAAC5D,KAAK,CAACE,WAAW,EAAC,GAAC;MAAA;QAAA2D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC;EAGd;AACJ;AAEA,eAAerE,SAAS;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}