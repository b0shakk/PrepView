{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\InterviewCoachWeb\\\\src\\\\components\\\\ScoreCard\\\\ScoreCard.js\";\nimport React from \"react\";\nimport { scoreText } from \"../../Scoring\";\nimport ProgressBar from \"../ProgressBar/ProgressBar\";\nimport NewProgBar from \"../NewProgBar/NewProgBar\";\nimport './ScoreCard.css';\nimport { TOPIC, CURR_Q } from \"../../views/QuestionScreen\";\nimport { Transcribed } from \"../RecButton/RecButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar rendered_q = \"\";\nvar scores = [(0, \"None\"), (0, \"None\"), (0, \"None\"), (0, \"None\")];\nvar last_resp = \"\";\nclass ScoreCard extends React.Component {\n  componentDidMount() {\n    this.interval = setInterval(() => this.setState({\n      time: Date.now()\n    }), 5000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  render() {\n    //console.log(scores)\n    if (typeof Transcribed.text == 'undefined') {\n      // console.log(\"Transcribed Undefined\")\n\n      var feedback = \"\";\n      if (scores[0] === \"None\") {\n        feedback = \"Please press the record button and speak for 5 seconds.\";\n      } else {\n        feedback = feedback + scores[0] + \" \";\n        feedback = feedback + scores[1] + \" \";\n        feedback = feedback + scores[2] + \" \";\n        feedback = feedback + scores[3] + \" \";\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"feedbacktext feedback\",\n          children: feedback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this);\n    } else if (CURR_Q != rendered_q) {\n      var scores_p = scoreText(TOPIC, rendered_q);\n      rendered_q = CURR_Q;\n    } else {\n      var feedback = \"\";\n      if (scores[0] === \"None\") {\n        feedback = \"Please press the record button and speak for 5 seconds.\";\n      } else {\n        feedback = feedback + scores[0] + \" \";\n        feedback = feedback + scores[1] + \" \";\n        feedback = feedback + scores[2] + \" \";\n        feedback = feedback + scores[3] + \" \";\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"feedbacktext feedback\",\n          children: feedback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this);\n    }\n    // console.log(scores_p)   \n    return scores_p.then(scores_new => {\n      // console.log(CURR_Q, rendered_q, scores, scores_new)\n      scores = scores_new;\n      var feedback = \"\";\n      if (scores[0] === \"None\") {\n        feedback = \"Please press the record button and speak for 5 seconds.\";\n      } else {\n        feedback = feedback + scores[0] + \" \";\n        feedback = feedback + scores[1] + \" \";\n        feedback = feedback + scores[2] + \" \";\n        feedback = feedback + scores[3] + \" \";\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"feedbacktext feedback\",\n          children: feedback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this);\n    });\n    // return (\n    //     <div> \n    //         <h1 className=\"scoretitletext\">Your Scores</h1>\n    //         <div className=\"displaywindow\">\n    //             <NewProgBar className='displaybar' value={scores[0][0]} title={scores[0][1]} /> \n    //             <NewProgBar className='displaybar' value={scores[1][0]} title={scores[1][1]} /> \n    //             <NewProgBar className='displaybar' value={scores[2][0]} title={scores[2][1]} /> \n    //             <NewProgBar className='displaybar' value={scores[3][0]} title={scores[3][1]} /> \n\n    //         </div>\n    //     </div>\n    // );\n  }\n}\nexport default ScoreCard;","map":{"version":3,"names":["React","scoreText","ProgressBar","NewProgBar","TOPIC","CURR_Q","Transcribed","jsxDEV","_jsxDEV","rendered_q","scores","last_resp","ScoreCard","Component","componentDidMount","interval","setInterval","setState","time","Date","now","componentWillUnmount","clearInterval","render","text","feedback","children","className","fileName","_jsxFileName","lineNumber","columnNumber","scores_p","then","scores_new"],"sources":["D:/projects/InterviewCoachWeb/src/components/ScoreCard/ScoreCard.js"],"sourcesContent":["import React from \"react\";\r\nimport { scoreText } from \"../../Scoring\";\r\nimport ProgressBar from \"../ProgressBar/ProgressBar\";\r\nimport NewProgBar from \"../NewProgBar/NewProgBar\";\r\nimport './ScoreCard.css'\r\nimport {TOPIC, CURR_Q} from \"../../views/QuestionScreen\";\r\nimport { Transcribed } from \"../RecButton/RecButton\";\r\n\r\n\r\n\r\nvar rendered_q = \"\";\r\nvar scores = [(0, \"None\"), (0, \"None\"), (0, \"None\"), (0, \"None\")];\r\nvar last_resp = \"\";\r\n\r\nclass ScoreCard extends React.Component {\r\n\r\n\r\n    \r\n    componentDidMount() {\r\n        this.interval = setInterval(() => this.setState({ time: Date.now() }), 5000);\r\n      }\r\n      componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n      }\r\n\r\n    render() {\r\n        //console.log(scores)\r\n        if (typeof Transcribed.text == 'undefined'){\r\n            // console.log(\"Transcribed Undefined\")\r\n            \r\n\r\n            var feedback = \"\"\r\n            if (scores[0] === \"None\"){\r\n              feedback = \"Please press the record button and speak for 5 seconds.\"\r\n          }\r\n          else{\r\n            feedback = feedback + scores[0] + \" \"\r\n            feedback = feedback + scores[1] + \" \"\r\n            feedback = feedback + scores[2] + \" \"\r\n            feedback = feedback + scores[3] + \" \"\r\n          }\r\n            return (\r\n            <div> \r\n                {/* <h1 className=\"scoretitletext\">Your Scores</h1>\r\n                <div className=\"displaywindow\">\r\n                    <NewProgBar className='displaybar' value={(scores[0])[0]} title=\"Speech Speed\" /> \r\n                    <NewProgBar className='displaybar' value={(scores[1])[0]} title=\"Pauses\" /> \r\n                    <NewProgBar className='displaybar' value={(scores[2])[0]} title=\"Filler Word Usage\" /> \r\n                  \r\n                </div> */}\r\n                {/* <h1 className=\"scoretitletext\">Feedback:</h1> */}\r\n                <h4 className=\"feedbacktext feedback\">{feedback}</h4>\r\n\r\n            </div>\r\n            )\r\n        }\r\n        \r\n        else if (CURR_Q != rendered_q){\r\n            var scores_p = scoreText(TOPIC, rendered_q);\r\n          \r\n            rendered_q = CURR_Q;\r\n        }\r\n        else{\r\n            var feedback = \"\"\r\n            if (scores[0] === \"None\"){\r\n              feedback = \"Please press the record button and speak for 5 seconds.\"\r\n          }\r\n          else{\r\n            feedback = feedback + scores[0] + \" \"\r\n            feedback = feedback + scores[1] + \" \"\r\n            feedback = feedback + scores[2] + \" \"\r\n            feedback = feedback + scores[3] + \" \"\r\n          }\r\n            return (\r\n            <div> \r\n                <h4 className=\"feedbacktext feedback\">{feedback}</h4>\r\n\r\n            </div>\r\n            )\r\n        }\r\n        // console.log(scores_p)   \r\n        return scores_p.then(scores_new => {\r\n            // console.log(CURR_Q, rendered_q, scores, scores_new)\r\n            scores = scores_new\r\n            var feedback = \"\"\r\n            if (scores[0] === \"None\"){\r\n              feedback = \"Please press the record button and speak for 5 seconds.\"\r\n          }\r\n          else{\r\n            feedback = feedback + scores[0] + \" \"\r\n            feedback = feedback + scores[1] + \" \"\r\n            feedback = feedback + scores[2] + \" \"\r\n            feedback = feedback + scores[3] + \" \"\r\n          }\r\n            return (\r\n            <div> \r\n                {/* <h1 className=\"scoretitletext\">Your Scores</h1> */}\r\n                {/* <div className=\"displaywindow\">\r\n                    <NewProgBar className='displaybar' value={(scores[0])[0]} title=\"Speech Speed\" /> \r\n                    <NewProgBar className='displaybar' value={(scores[1])[0]} title=\"Pauses\" /> \r\n                    <NewProgBar className='displaybar' value={(scores[2])[0]} title=\"Filler Word Usage\" /> \r\n    \r\n                \r\n                </div> */}\r\n                <h4 className=\"feedbacktext feedback\">{feedback}</h4>\r\n\r\n            </div>\r\n            )\r\n        })\r\n        // return (\r\n        //     <div> \r\n        //         <h1 className=\"scoretitletext\">Your Scores</h1>\r\n        //         <div className=\"displaywindow\">\r\n        //             <NewProgBar className='displaybar' value={scores[0][0]} title={scores[0][1]} /> \r\n        //             <NewProgBar className='displaybar' value={scores[1][0]} title={scores[1][1]} /> \r\n        //             <NewProgBar className='displaybar' value={scores[2][0]} title={scores[2][1]} /> \r\n        //             <NewProgBar className='displaybar' value={scores[3][0]} title={scores[3][1]} /> \r\n                \r\n        //         </div>\r\n        //     </div>\r\n        // );\r\n    }\r\n}\r\n\r\nexport default ScoreCard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}