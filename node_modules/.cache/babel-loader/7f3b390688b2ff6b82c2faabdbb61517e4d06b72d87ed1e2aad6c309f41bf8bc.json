{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.booleanLiteral = void 0;\nconst Schema_1 = require(\"../../Schema\");\nconst createIdentitySchemaCreator_1 = require(\"../../utils/createIdentitySchemaCreator\");\nconst getErrorMessageForIncorrectType_1 = require(\"../../utils/getErrorMessageForIncorrectType\");\nfunction booleanLiteral(literal) {\n  const schemaCreator = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.BOOLEAN_LITERAL, (value, {\n    breadcrumbsPrefix = []\n  } = {}) => {\n    if (value === literal) {\n      return {\n        ok: true,\n        value: literal\n      };\n    } else {\n      return {\n        ok: false,\n        errors: [{\n          path: breadcrumbsPrefix,\n          message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, `${literal.toString()}`)\n        }]\n      };\n    }\n  });\n  return schemaCreator();\n}\nexports.booleanLiteral = booleanLiteral;","map":{"version":3,"names":["Object","defineProperty","exports","value","booleanLiteral","Schema_1","require","createIdentitySchemaCreator_1","getErrorMessageForIncorrectType_1","literal","schemaCreator","createIdentitySchemaCreator","SchemaType","BOOLEAN_LITERAL","breadcrumbsPrefix","ok","errors","path","message","getErrorMessageForIncorrectType","toString"],"sources":["D:/projects/InterviewCoachWeb/node_modules/cohere-ai/core/schemas/builders/literals/booleanLiteral.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.booleanLiteral = void 0;\nconst Schema_1 = require(\"../../Schema\");\nconst createIdentitySchemaCreator_1 = require(\"../../utils/createIdentitySchemaCreator\");\nconst getErrorMessageForIncorrectType_1 = require(\"../../utils/getErrorMessageForIncorrectType\");\nfunction booleanLiteral(literal) {\n    const schemaCreator = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.BOOLEAN_LITERAL, (value, { breadcrumbsPrefix = [] } = {}) => {\n        if (value === literal) {\n            return {\n                ok: true,\n                value: literal,\n            };\n        }\n        else {\n            return {\n                ok: false,\n                errors: [\n                    {\n                        path: breadcrumbsPrefix,\n                        message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, `${literal.toString()}`),\n                    },\n                ],\n            };\n        }\n    });\n    return schemaCreator();\n}\nexports.booleanLiteral = booleanLiteral;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAG,KAAK,CAAC;AAC/B,MAAMC,QAAQ,GAAGC,OAAO,CAAC,cAAc,CAAC;AACxC,MAAMC,6BAA6B,GAAGD,OAAO,CAAC,yCAAyC,CAAC;AACxF,MAAME,iCAAiC,GAAGF,OAAO,CAAC,6CAA6C,CAAC;AAChG,SAASF,cAAcA,CAACK,OAAO,EAAE;EAC7B,MAAMC,aAAa,GAAG,CAAC,CAAC,EAAEH,6BAA6B,CAACI,2BAA2B,EAAEN,QAAQ,CAACO,UAAU,CAACC,eAAe,EAAE,CAACV,KAAK,EAAE;IAAEW,iBAAiB,GAAG;EAAG,CAAC,GAAG,CAAC,CAAC,KAAK;IAClK,IAAIX,KAAK,KAAKM,OAAO,EAAE;MACnB,OAAO;QACHM,EAAE,EAAE,IAAI;QACRZ,KAAK,EAAEM;MACX,CAAC;IACL,CAAC,MACI;MACD,OAAO;QACHM,EAAE,EAAE,KAAK;QACTC,MAAM,EAAE,CACJ;UACIC,IAAI,EAAEH,iBAAiB;UACvBI,OAAO,EAAE,CAAC,CAAC,EAAEV,iCAAiC,CAACW,+BAA+B,EAAEhB,KAAK,EAAG,GAAEM,OAAO,CAACW,QAAQ,CAAC,CAAE,EAAC;QAClH,CAAC;MAET,CAAC;IACL;EACJ,CAAC,CAAC;EACF,OAAOV,aAAa,CAAC,CAAC;AAC1B;AACAR,OAAO,CAACE,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}