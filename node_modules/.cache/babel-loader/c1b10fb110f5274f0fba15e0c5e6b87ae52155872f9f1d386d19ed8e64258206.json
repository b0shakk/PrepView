{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\InterviewCoachWeb\\\\src\\\\components\\\\ScoreCard\\\\ScoreCard.js\";\nimport React from \"react\";\nimport { scoreText } from \"../../Scoring\";\nimport ProgressBar from \"../ProgressBar/ProgressBar\";\nimport NewProgBar from \"../NewProgBar/NewProgBar\";\nimport \"./ScoreCard.css\";\nimport { TOPIC, CURR_Q } from \"../../views/QuestionScreen\";\nimport { Transcribed } from \"../RecButton/RecButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar rendered_q = \"\";\nvar scores = [(0, \"None\"), (0, \"None\"), (0, \"None\"), (0, \"None\")];\nvar last_resp = \"\";\nclass ScoreCard extends React.Component {\n  componentDidMount() {\n    this.interval = setInterval(() => this.setState({\n      time: Date.now()\n    }), 5000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  render() {\n    //console.log(scores)\n    if (typeof Transcribed.text == \"undefined\") {\n      // console.log(\"Transcribed Undefined\")\n\n      var feedback = \"\";\n      if (scores[0] === \"None\") {\n        feedback = \"Please press the record button and speak for 5 seconds.\";\n      } else {\n        feedback = feedback + scores[0] + \" \";\n        feedback = feedback + scores[1] + \" \";\n        feedback = feedback + scores[2] + \" \";\n        feedback = feedback + scores[3] + \" \";\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"feedbacktext feedback\",\n          children: feedback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this);\n    } else if (CURR_Q != rendered_q) {\n      var scores_p = scoreText(TOPIC, rendered_q);\n      rendered_q = CURR_Q;\n    } else {\n      var feedback = \"\";\n      if (scores[0] === \"None\") {\n        feedback = \"Please press the record button and speak for 5 seconds.\";\n      } else {\n        feedback = feedback + scores[0] + \" \";\n        feedback = feedback + scores[1] + \" \";\n        feedback = feedback + scores[2] + \" \";\n        feedback = feedback + scores[3] + \" \";\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"feedbacktext feedback\",\n          children: feedback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this);\n    }\n    // console.log(scores_p)\n    let templates = scores_p.then(scores_new => {\n      // console.log(CURR_Q, rendered_q, scores, scores_new)\n      scores = scores_new;\n      var feedback = \"\";\n      if (scores[0] === \"None\") {\n        feedback = \"Please press the record button and speak for 5 seconds.\";\n      } else {\n        feedback = feedback + scores[0] + \" \";\n        feedback = feedback + scores[1] + \" \";\n        feedback = feedback + scores[2] + \" \";\n        feedback = feedback + scores[3] + \" \";\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Hello\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this);\n    });\n    if (templates) return templates;\n    // return\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"feedbacktext feedback\",\n        children: feedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default ScoreCard;","map":{"version":3,"names":["React","scoreText","ProgressBar","NewProgBar","TOPIC","CURR_Q","Transcribed","jsxDEV","_jsxDEV","rendered_q","scores","last_resp","ScoreCard","Component","componentDidMount","interval","setInterval","setState","time","Date","now","componentWillUnmount","clearInterval","render","text","feedback","children","className","fileName","_jsxFileName","lineNumber","columnNumber","scores_p","templates","then","scores_new"],"sources":["D:/projects/InterviewCoachWeb/src/components/ScoreCard/ScoreCard.js"],"sourcesContent":["import React from \"react\";\r\nimport { scoreText } from \"../../Scoring\";\r\nimport ProgressBar from \"../ProgressBar/ProgressBar\";\r\nimport NewProgBar from \"../NewProgBar/NewProgBar\";\r\nimport \"./ScoreCard.css\";\r\nimport { TOPIC, CURR_Q } from \"../../views/QuestionScreen\";\r\nimport { Transcribed } from \"../RecButton/RecButton\";\r\n\r\nvar rendered_q = \"\";\r\nvar scores = [(0, \"None\"), (0, \"None\"), (0, \"None\"), (0, \"None\")];\r\nvar last_resp = \"\";\r\n\r\nclass ScoreCard extends React.Component {\r\n  componentDidMount() {\r\n    this.interval = setInterval(\r\n      () => this.setState({ time: Date.now() }),\r\n      5000\r\n    );\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    //console.log(scores)\r\n    if (typeof Transcribed.text == \"undefined\") {\r\n      // console.log(\"Transcribed Undefined\")\r\n\r\n      var feedback = \"\";\r\n      if (scores[0] === \"None\") {\r\n        feedback = \"Please press the record button and speak for 5 seconds.\";\r\n      } else {\r\n        feedback = feedback + scores[0] + \" \";\r\n        feedback = feedback + scores[1] + \" \";\r\n        feedback = feedback + scores[2] + \" \";\r\n        feedback = feedback + scores[3] + \" \";\r\n      }\r\n      return (\r\n        <div>\r\n          {/* <h1 className=\"scoretitletext\">Your Scores</h1>\r\n                <div className=\"displaywindow\">\r\n                    <NewProgBar className='displaybar' value={(scores[0])[0]} title=\"Speech Speed\" /> \r\n                    <NewProgBar className='displaybar' value={(scores[1])[0]} title=\"Pauses\" /> \r\n                    <NewProgBar className='displaybar' value={(scores[2])[0]} title=\"Filler Word Usage\" /> \r\n                  \r\n                </div> */}\r\n          {/* <h1 className=\"scoretitletext\">Feedback:</h1> */}\r\n          <h4 className=\"feedbacktext feedback\">{feedback}</h4>\r\n        </div>\r\n      );\r\n    } else if (CURR_Q != rendered_q) {\r\n      var scores_p = scoreText(TOPIC, rendered_q);\r\n\r\n      rendered_q = CURR_Q;\r\n    } else {\r\n      var feedback = \"\";\r\n      if (scores[0] === \"None\") {\r\n        feedback = \"Please press the record button and speak for 5 seconds.\";\r\n      } else {\r\n        feedback = feedback + scores[0] + \" \";\r\n        feedback = feedback + scores[1] + \" \";\r\n        feedback = feedback + scores[2] + \" \";\r\n        feedback = feedback + scores[3] + \" \";\r\n      }\r\n      return (\r\n        <div>\r\n          <h4 className=\"feedbacktext feedback\">{feedback}</h4>\r\n        </div>\r\n      );\r\n    }\r\n    // console.log(scores_p)\r\n    let templates = scores_p.then((scores_new) => {\r\n      // console.log(CURR_Q, rendered_q, scores, scores_new)\r\n      scores = scores_new;\r\n      var feedback = \"\";\r\n      if (scores[0] === \"None\") {\r\n        feedback = \"Please press the record button and speak for 5 seconds.\";\r\n      } else {\r\n        feedback = feedback + scores[0] + \" \";\r\n        feedback = feedback + scores[1] + \" \";\r\n        feedback = feedback + scores[2] + \" \";\r\n        feedback = feedback + scores[3] + \" \";\r\n      }\r\n      return (\r\n        <div>\r\n          {/* <h1 className=\"scoretitletext\">Your Scores</h1> */}\r\n          Hello\r\n          {/* <div className=\"displaywindow\">\r\n            <NewProgBar\r\n              className=\"displaybar\"\r\n              value={scores[0][0]}\r\n              title=\"Speech Speed\"\r\n            />\r\n            <NewProgBar\r\n              className=\"displaybar\"\r\n              value={scores[1][0]}\r\n              title=\"Pauses\"\r\n            />\r\n            <NewProgBar\r\n              className=\"displaybar\"\r\n              value={scores[2][0]}\r\n              title=\"Filler Word Usage\"\r\n            />\r\n          </div>\r\n          <h4 className=\"feedbacktext feedback\">{feedback}</h4> */}\r\n        </div>\r\n      );\r\n    });\r\n    if (templates) return templates;\r\n    // return\r\n    return (\r\n      <div>\r\n        <h4 className=\"feedbacktext feedback\">{feedback}</h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ScoreCard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}